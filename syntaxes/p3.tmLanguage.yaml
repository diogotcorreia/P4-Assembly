# [PackageDev] target_format: plist, ext: tmLanguage
name: P3 Assembly
scopeName: source.p3
fileTypes: as

patterns:
- include: '#registers'
- include: '#mnemonics'
- include: '#constants'
- include: '#entities'
- include: '#support'
- include: '#comments'
- include: '#preprocessor'
- include: '#strings'

repository:
  constants:
    patterns:
    # floating-point
    # binary
    - name: constant.numeric.binary.floating-point.p3
      match: '(?i)\b0[by](?:[01][01_]*)\.(?:(?:[01][01_]*)?(?:p[+-]?(?:[0-9][0-9_]*))?\b)?'      
    - name: constant.numeric.binary.floating-point.p3
      match: '(?i)\b0[by](?:[01][01_]*)(?:p[+-]?(?:[0-9][0-9_]*))\b'      
    # octal
    - name: constant.numeric.octal.floating-point.p3
      match: '(?i)\b0[oq](?:[0-7][0-7_]*)\.(?:(?:[0-7][0-7_]*)?(?:p[+-]?(?:[0-9][0-9_]*))?\b)?'      
    - name: constant.numeric.octal.floating-point.p3
      match: '(?i)\b0[oq](?:[0-7][0-7_]*)(?:p[+-]?(?:[0-9][0-9_]*))\b'      
    # decimal
    - name: constant.numeric.decimal.floating-point.p3
      match: '(?i)\b(?:0[dt])?(?:[0-9][0-9_]*)\.(?:(?:[0-9][0-9_]*)?(?:e[+-]?(?:[0-9][0-9_]*))?\b)?'      
    - name: constant.numeric.decimal.floating-point.p3
      match: '(?i)\b(?:[0-9][0-9_]*)(?:e[+-]?(?:[0-9][0-9_]*))\b'      
    - name: constant.numeric.decimal.packed-bcd.p3
      match: '(?i)\b(?:[0-9][0-9_]*)p(?:[0-9][0-9_]*)?\b'      
    # hex
    - name: constant.numeric.hex.floating-point.p3
      match: '(?i)\b0[xh](?:[[:xdigit:]][[:xdigit:]_]*)\.(?:(?:[[:xdigit:]][[:xdigit:]_]*)?(?:p[+-]?(?:[0-9][0-9_]*))?\b)?'      
    - name: constant.numeric.hex.floating-point.p3
      match: '(?i)\b0[xh](?:[[:xdigit:]][[:xdigit:]_]*)(?:p[+-]?(?:[0-9][0-9_]*))\b'      
    - name: constant.numeric.hex.floating-point.p3
      match: '(?i)\$[0-9]\_?(?:[[:xdigit:]][[:xdigit:]_]*)?\.(?:(?:[[:xdigit:]][[:xdigit:]_]*)?(?:p[+-]?(?:[0-9][0-9_]*))?\b)?'      
    - name: constant.numeric.hex.floating-point.p3
      match: '(?i)\$[0-9]\_?(?:[[:xdigit:]][[:xdigit:]_]*)(?:p[+-]?(?:[0-9][0-9_]*))\b'      
    # integers
    - name: constant.numeric.binary.p3
      match: '(?i)\b(?:(?:0[by](?:[01][01_]*))|(?:(?:[01][01_]*)[by]))\b'      
    - name: constant.numeric.octal.p3
      match: '(?i)\b(?:(?:0[oq](?:[0-7][0-7_]*))|(?:(?:[0-7][0-7_]*)[oq]))\b'      
    - name: constant.numeric.decimal.p3
      match: '(?i)\b(?:(?:0[dt](?:[0-9][0-9_]*))|(?:(?:[0-9][0-9_]*)[dt]?))\b'      
    - name: constant.numeric.hex.p3
      match: '(?i)(?:\$[0-9]\_?(?:[[:xdigit:]][[:xdigit:]_]*)?)\b'      
    - name: constant.numeric.hex.p3
      match: '(?i)\b(?:(?:0[xh](?:[[:xdigit:]][[:xdigit:]_]*))|(?:(?:[[:xdigit:]][[:xdigit:]_]*)[hxHX]))\b'      

  entities:
    patterns:
    #labels
    - match: '(\.\.@)((?:[[:alpha:]_?](?:[[:alnum:]_$#@~.?]*)))(?:(\:)?|\b)'
      name: entity.name.function.p3
      captures:
        '1': {name: punctuation.separator.p3 storage.modifier.p3}
        '2': {name: entity.name.function.special.p3}
        '3': {name: punctuation.separator.p3}
    - match: '(?:(\.)?|\b)((?:[[:alpha:]_?](?:[[:alnum:]_$#@~.?]*)))(?:(\:))'
      name: entity.name.function.p3
      captures:
        '1': {name: punctuation.separator.p3 storage.modifier.p3}
        '2': {name: entity.name.function.p3}
        '3': {name: punctuation.separator.p3}
    - match: '(\.)([0-9]+(?:[[:alnum:]_$#@~.?]*))(?:(\:)?|\b)'
      name: entity.name.function.p3
      captures:
        '1': {name: punctuation.separator.p3 storage.modifier.p3}
        '2': {name: entity.name.function.p3}
        '3': {name: punctuation.separator.p3}
    - match: '(?:(\.)?|\b)([0-9$@~](?:[[:alnum:]_$#@~.?]*))(?:(\:))'
      name: invalid.illegal.entity.name.function.p3
      captures:
        '1': {name: punctuation.separator.p3 storage.modifier.p3}
        '2': {name: invalid.illegal.entity.name.function.p3}
        '3': {name: punctuation.separator.p3}

  support:
    patterns:
    - name: storage.type.p3
      match: '(?i)\b(tab|str|word)\b'
    - begin: '(M\[)'
      beginCaptures: 
        '0': {name: storage.modifier.memory-address.p3}
      patterns:
      - match: '\+'
        name: 'storage.modifier.indexed.p3'
      - include: "#constants"
      - include: "#registers"
      end: '(\])'
      endCaptures: 
        '0': {name: storage.modifier.memory-address.p3}
 
  comments:
    patterns:
    - name: comment.line
      match: (;|(^|\s)#\s).*$

  preprocessor:
    patterns:
    - name: meta.preprocessor.orig
      match: (?i)\b(orig)\b

    - name: meta.preprocessor.equ
      match: (?i)\b(equ)\b

  strings:
    patterns:
    - name: string.quoted.single.p3
      begin: "'"
      beginCaptures:
        '0': { name: punctuation.definition.string.begin.p3 }
      end: "'"
      endCaptures:
        '0': { name: punctuation.definition.string.end.p3 }

  registers:
    patterns:
    - name: constant.language.register.general-purpose.p3
      match: '(?i)\bR([0-7]|1[1-5])\b'
    - name: constant.language.register.special.p3
      match: '(?i)\b(PC|SP|RE)\b'

  mnemonics:
    patterns:
    - name: keyword.operator.word.mnemonic.general-purpose.data-transfer
      match: '(?i)\b(mov|mvbh|mvbl|xch|push|pop)\b'
    - name: keyword.operator.word.mnemonic.general-purpose.binary-arithmetic
      match: '(?i)\b(add|addc|sub|subb|mul|div|inc|dec|neg|cmp)\b'
    - name: keyword.operator.word.mnemonic.general-purpose.logical
      match: '(?i)\b(and|x?or|com|test)\b'
    - name: keyword.operator.word.mnemonic.general-purpose.rotate
      match: '(?i)\b(sh[rl](a?)|ro[rl](c?))\b'
    - name: keyword.operator.word.mnemonic.general-purpose.other
      match: '(?i)\b(nop|eni|dsi|stc|clc|cmc)\b'
    - match: '(?i)\b((br|jmp)(\.N?[zcnopi])?)(\s+)(\w+)\b'
      captures:
        '1': {name: keyword.control.mnemonic.jmp}
        '5': {name: entity.name.function.p3}
    - match: '(?i)\b((call)(\.N?[zcnopi])?)(\s+)(\w+)\b'
      captures:
        '1': {name: keyword.control.mnemonic.call}
        '5': {name: entity.name.function.p3}
    - name: keyword.control.mnemonic.other
      match: '(?i)\b(ret|retn|rti|int)\b'