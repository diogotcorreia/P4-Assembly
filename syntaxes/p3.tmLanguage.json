{
  "name": "P3 Assembly",
  "scopeName": "source.p3",
  "fileTypes": "as",
  "patterns": [
    {
      "include": "#registers"
    },
    {
      "include": "#mnemonics"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#entities"
    },
    {
      "include": "#support"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#preprocessor"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.binary.p3",
          "match": "(\\b|-)[01]+b\\b"
        },
        {
          "name": "constant.numeric.octal.p3",
          "match": "(\\b|-)[0-7]+o\\b"
        },
        {
          "name": "constant.numeric.decimal.p3",
          "match": "(\\b|-)[0-9]+\\b"
        },
        {
          "name": "constant.numeric.hex.p3",
          "match": "(\\b|-)[0-9A-Fa-f]{1,4}h\\b"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "match": "(\\.\\.@)((?:[[:alpha:]_?](?:[[:alnum:]_$#@~.?]*)))(?:(\\:)?|\\b)",
          "name": "entity.name.function.p3",
          "captures": {
            "1": {
              "name": "punctuation.separator.p3 storage.modifier.p3"
            },
            "2": {
              "name": "entity.name.function.special.p3"
            },
            "3": {
              "name": "punctuation.separator.p3"
            }
          }
        },
        {
          "match": "(?:(\\.)?|\\b)((?:[[:alpha:]_?](?:[[:alnum:]_$#@~.?]*)))(?:(\\:))",
          "name": "entity.name.function.p3",
          "captures": {
            "1": {
              "name": "punctuation.separator.p3 storage.modifier.p3"
            },
            "2": {
              "name": "entity.name.function.p3"
            },
            "3": {
              "name": "punctuation.separator.p3"
            }
          }
        },
        {
          "match": "(\\.)([0-9]+(?:[[:alnum:]_$#@~.?]*))(?:(\\:)?|\\b)",
          "name": "entity.name.function.p3",
          "captures": {
            "1": {
              "name": "punctuation.separator.p3 storage.modifier.p3"
            },
            "2": {
              "name": "entity.name.function.p3"
            },
            "3": {
              "name": "punctuation.separator.p3"
            }
          }
        },
        {
          "match": "(?:(\\.)?|\\b)([0-9$@~](?:[[:alnum:]_$#@~.?]*))(?:(\\:))",
          "name": "invalid.illegal.entity.name.function.p3",
          "captures": {
            "1": {
              "name": "punctuation.separator.p3 storage.modifier.p3"
            },
            "2": {
              "name": "invalid.illegal.entity.name.function.p3"
            },
            "3": {
              "name": "punctuation.separator.p3"
            }
          }
        }
      ]
    },
    "support": {
      "patterns": [
        {
          "name": "storage.type.p3",
          "match": "(?i)\\b(tab|str|word)\\b"
        },
        {
          "begin": "(M\\[)",
          "beginCaptures": {
            "0": {
              "name": "storage.modifier.memory-address.p3"
            }
          },
          "patterns": [
            {
              "match": "\\+",
              "name": "storage.modifier.indexed.p3"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#registers"
            }
          ],
          "end": "(\\])",
          "endCaptures": {
            "0": {
              "name": "storage.modifier.memory-address.p3"
            }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line",
          "match": ";.*$"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.orig",
          "match": "(?i)\\b(orig)\\b"
        },
        {
          "name": "meta.preprocessor.equ",
          "match": "(?i)\\b(equ)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.p3",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.p3"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.p3"
            }
          }
        }
      ]
    },
    "registers": {
      "patterns": [
        {
          "name": "constant.language.register.general-purpose.p3",
          "match": "(?i)\\bR([0-7]|1[1-5])\\b"
        },
        {
          "name": "constant.language.register.special.p3",
          "match": "(?i)\\b(PC|SP|RE)\\b"
        }
      ]
    },
    "mnemonics": {
      "patterns": [
        {
          "name": "keyword.operator.word.mnemonic.general-purpose.data-transfer",
          "match": "(?i)\\b(mov|mvb(h|l)|xch|push|pop)\\b"
        },
        {
          "name": "keyword.operator.word.mnemonic.general-purpose.binary-arithmetic",
          "match": "(?i)\\b(addc?|subb?|mul|div|inc|dec|neg|cmp)\\b"
        },
        {
          "name": "keyword.operator.word.mnemonic.general-purpose.logical",
          "match": "(?i)\\b(and|x?or|com|test)\\b"
        },
        {
          "name": "keyword.operator.word.mnemonic.general-purpose.rotate",
          "match": "(?i)\\b(sh[rl]a?|ro[rl]c?)\\b"
        },
        {
          "name": "keyword.operator.word.mnemonic.general-purpose.other",
          "match": "(?i)\\b(nop|eni|dsi|stc|clc|cmc)\\b"
        },
        {
          "match": "(?i)\\b((br|jmp)(\\.n?[zcnopi])?)(\\s+)(\\w+)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.mnemonic.jmp"
            },
            "5": {
              "name": "entity.name.function.p3"
            }
          }
        },
        {
          "match": "(?i)\\b((call)(\\.n?[zcnopi])?)(\\s+)(\\w+)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.mnemonic.call"
            },
            "5": {
              "name": "entity.name.function.p3"
            }
          }
        },
        {
          "name": "keyword.control.mnemonic.other",
          "match": "(?i)\\b(retn?|rti|int)\\b"
        }
      ]
    }
  }
}
